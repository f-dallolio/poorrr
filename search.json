[{"path":"https://f-dallolio.github.io/poorrr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Filippo Dall’Olio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://f-dallolio.github.io/poorrr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Filippo Dall'Olio. Author, maintainer.","code":""},{"path":"https://f-dallolio.github.io/poorrr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dall'Olio F (2025). poorrr: Package (One Line, Title Case). R package version 0.0.0.9000, https://f-dallolio.github.io/poorrr/, https://github.com/f-dallolio/poorrr.","code":"@Manual{,   title = {poorrr: What the Package Does (One Line, Title Case)},   author = {Filippo Dall'Olio},   year = {2025},   note = {R package version 0.0.0.9000, https://f-dallolio.github.io/poorrr/},   url = {https://github.com/f-dallolio/poorrr}, }"},{"path":"https://f-dallolio.github.io/poorrr/reference/accumulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Accumulate intermediate results of a vector reduction — accumulate","title":"Accumulate intermediate results of a vector reduction — accumulate","text":"Accumulate intermediate results vector reduction","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/accumulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accumulate intermediate results of a vector reduction — accumulate","text":"","code":"accumulate(.x, .f, ..., .init)  accumulate_right(.x, .f, ..., .init)"},{"path":"https://f-dallolio.github.io/poorrr/reference/as_mapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a mapper function — as_mapper","title":"Convert an object into a mapper function — as_mapper","text":"Convert object mapper function Convert object mapper function","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/as_mapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a mapper function — as_mapper","text":"","code":"as_mapper(.f, ...)  as_mapper(.f, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the value or position of the first match — detect","title":"Find the value or position of the first match — detect","text":"Find value position first match","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the value or position of the first match — detect","text":"","code":"detect(.x, .f, ..., .right = FALSE, .p = is_true)  detect_index(.x, .f, ..., .right = FALSE, .p = is_true)"},{"path":"https://f-dallolio.github.io/poorrr/reference/every.html","id":null,"dir":"Reference","previous_headings":"","what":"Do every, some, or none of the elements of a list satisfy a predicate? — every","title":"Do every, some, or none of the elements of a list satisfy a predicate? — every","text":"every, , none elements list satisfy predicate?","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/every.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do every, some, or none of the elements of a list satisfy a predicate? — every","text":"","code":"every(.x, .p, ...)  some(.x, .p, ...)  none(.x, .p, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/flatten_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a list — flatten_list","title":"Flatten a list — flatten_list","text":"Flatten list","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/flatten_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a list — flatten_list","text":"","code":"list_flatten(   x,   ...,   name_spec = \"{outer}_{inner}\",   name_repair = c(\"minimal\", \"unique\", \"check_unique\", \"universal\") )"},{"path":"https://f-dallolio.github.io/poorrr/reference/has_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a list contain an object? — has_element","title":"Does a list contain an object? — has_element","text":"list contain object?","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/has_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a list contain an object? — has_element","text":"","code":"has_element(.x, .y)"},{"path":"https://f-dallolio.github.io/poorrr/reference/head_while.html","id":null,"dir":"Reference","previous_headings":"","what":"Find head/tail that all satisfies a predicate. — head_while","title":"Find head/tail that all satisfies a predicate. — head_while","text":"Find head/tail satisfies predicate.","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/head_while.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find head/tail that all satisfies a predicate. — head_while","text":"","code":"head_while(.x, .p, ...)  tail_while(.x, .p, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep/discard elements based on their values — keep","title":"Keep/discard elements based on their values — keep","text":"Keep/discard elements based values","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep/discard elements based on their values — keep","text":"","code":"keep(.x, .f, ...)  discard(.x, .p, ...)  compact(.x)"},{"path":"https://f-dallolio.github.io/poorrr/reference/keep_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep/discard elements based on their name/position — keep_at","title":"Keep/discard elements based on their name/position — keep_at","text":"Keep/discard elements based name/position","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/keep_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep/discard elements based on their name/position — keep_at","text":"","code":"keep_at(x, at)  discard_at(x, at)"},{"path":"https://f-dallolio.github.io/poorrr/reference/list_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a list — list_assign","title":"Modify a list — list_assign","text":"Modify list","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/list_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a list — list_assign","text":"","code":"list_assign(.x, ..., .is_node = NULL)  list_modify(.x, ..., .is_node = NULL)  list_merge(.x, ..., .is_node = NULL)"},{"path":"https://f-dallolio.github.io/poorrr/reference/list_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine list elements into a single data structure — list_c","title":"Combine list elements into a single data structure — list_c","text":"Combine list elements single data structure","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/list_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine list elements into a single data structure — list_c","text":"","code":"list_c(x)  list_rbind(x)  list_cbind(x)"},{"path":"https://f-dallolio.github.io/poorrr/reference/list_simplify.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify a list to an atomic or S3 vector — list_simplify","title":"Simplify a list to an atomic or S3 vector — list_simplify","text":"Simplify list atomic S3 vector","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/list_simplify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify a list to an atomic or S3 vector — list_simplify","text":"","code":"list_simplify(   x,   ...,   strict = TRUE,   error_arg = caller_arg(x),   error_call = caller_env() )"},{"path":"https://f-dallolio.github.io/poorrr/reference/list_transpose.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose a list — list_transpose","title":"Transpose a list — list_transpose","text":"Transpose list","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/list_transpose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose a list — list_transpose","text":"","code":"list_transpose(.l)"},{"path":"https://f-dallolio.github.io/poorrr/reference/lmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to list-elements of a list — lmap","title":"Apply a function to list-elements of a list — lmap","text":"Apply function list-elements list","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/lmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to list-elements of a list — lmap","text":"","code":"lmap(.x, .f, ...)  lmap_if(.x, .p, .f, ..., .else = NULL)  lmap_at(.x, .at, .f, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/map.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each element of a vector — map","title":"Apply a function to each element of a vector — map","text":"Apply function element vector","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each element of a vector — map","text":"","code":"map(.x, .f, ...)  walk(.x, .f, ...)  map_lgl(.x, .f, ...)  map_int(.x, .f, ...)  map_dbl(.x, .f, ...)  map_chr(.x, .f, ...)  map_vec(.x, .f, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/map2.html","id":null,"dir":"Reference","previous_headings":"","what":"Map over two inputs — map2","title":"Map over two inputs — map2","text":"Map two inputs","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/map2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map over two inputs — map2","text":"","code":"map2(.x, .y, .f, ...)  walk2(.x, .y, .f, ...)  map2_lgl(.x, .y, .f, ...)  map2_int(.x, .y, .f, ...)  map2_dbl(.x, .y, .f, ...)  map2_chr(.x, .y, .f, ...)  map2_vec(.x, .y, .f, ..., .ptype = NULL)  imap(.x, .f, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/map_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Map/modify elements at given depth — map_depth","title":"Map/modify elements at given depth — map_depth","text":"Map/modify elements given depth","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/map_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map/modify elements at given depth — map_depth","text":"","code":"map_depth(.x, .depth, .f, ..., .ragged = .depth < 0, .is_node = NULL)  modify_depth(.x, .depth, .f, ..., .ragged = .depth < 0, .is_node = NULL)"},{"path":"https://f-dallolio.github.io/poorrr/reference/map_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each element of a vector conditionally — map_if","title":"Apply a function to each element of a vector conditionally — map_if","text":"Apply function element vector conditionally","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/map_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each element of a vector conditionally — map_if","text":"","code":"map_if(.x, .p, .f, ...)  map_at(.x, .at, .f, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/modify_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a pluck location — modify_in","title":"Modify a pluck location — modify_in","text":"Modify pluck location","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/modify_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a pluck location — modify_in","text":"","code":"modify_in(.x, .where, .f, ...)  assign_in(x, where, value)"},{"path":"https://f-dallolio.github.io/poorrr/reference/negate.html","id":null,"dir":"Reference","previous_headings":"","what":"Negate a predicate function so it selects what it previously rejected — negate","title":"Negate a predicate function so it selects what it previously rejected — negate","text":"Negate predicate function selects previously rejected","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/negate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negate a predicate function so it selects what it previously rejected — negate","text":"","code":"negate(.p)"},{"path":"https://f-dallolio.github.io/poorrr/reference/pluck.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely get or set an element deep within a nested data structure — pluck","title":"Safely get or set an element deep within a nested data structure — pluck","text":"Safely get set element deep within nested data structure","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/pluck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely get or set an element deep within a nested data structure — pluck","text":"","code":"pluck(.x, ...) <- value  pluck(.x, ..., .default = NULL)  pluck_exists(.x, ...)  pluck_depth(x, is_node = NULL)  ith(x, i, default = NULL, arg = caller_arg(i), call = caller_env())  ith_index(i, n, .default = NULL)"},{"path":"https://f-dallolio.github.io/poorrr/reference/pmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Map over multiple input simultaneously (in ","title":"Map over multiple input simultaneously (in ","text":"Map multiple input simultaneously (\"parallel\")","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/pmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map over multiple input simultaneously (in ","text":"","code":"pmap(.l, .f, ...)  pwalk(.l, .f, ...)  pmap_lgl(.l, .f, ...)  pmap_int(.l, .f, ...)  pmap_dbl(.l, .f, ...)  pmap_chr(.l, .f, ...)  pmap_vec(.l, .f, ...)"},{"path":"https://f-dallolio.github.io/poorrr/reference/poorrr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"poorrr: What the Package Does (One Line, Title Case) — poorrr-package","title":"poorrr: What the Package Does (One Line, Title Case) — poorrr-package","text":"poor man's dependency-free recreation package 'purrr'.","code":""},{"path":[]},{"path":"https://f-dallolio.github.io/poorrr/reference/poorrr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"poorrr: What the Package Does (One Line, Title Case) — poorrr-package","text":"Maintainer: Filippo Dall'Olio fdallolio@brocku.ca","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce a list to a single value by iteratively applying a binary function — reduce","title":"Reduce a list to a single value by iteratively applying a binary function — reduce","text":"Reduce list single value iteratively applying binary function","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce a list to a single value by iteratively applying a binary function — reduce","text":"","code":"reduce(.x, .f, ..., .init)  reduce_right(.x, .f, ..., .init)"},{"path":"https://f-dallolio.github.io/poorrr/reference/utils-gh.html","id":null,"dir":"Reference","previous_headings":"","what":"Github Utilities — utils-gh","title":"Github Utilities — utils-gh","text":"Github Utilities","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/utils-gh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Github Utilities — utils-gh","text":"","code":"gh_url_R(repo)  gh_url_test(repo)"},{"path":"https://f-dallolio.github.io/poorrr/reference/utils-string.html","id":null,"dir":"Reference","previous_headings":"","what":"Base replacement for string manipulation based on stringr. — utils-string","title":"Base replacement for string manipulation based on stringr. — utils-string","text":"Base replacement string manipulation based stringr.","code":""},{"path":"https://f-dallolio.github.io/poorrr/reference/utils-string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base replacement for string manipulation based on stringr. — utils-string","text":"","code":"str_flatten_comma(string, last = \"and\", na.rm = FALSE, oxford = TRUE)  str_flatten(string, collapse = \"\", ...)  str_detect(   string,   pattern,   negate = FALSE,   ...,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE )  str_which(   string,   pattern,   negate = FALSE,   ...,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE )  str_subset(   string,   pattern,   negate = FALSE,   ...,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE )  str_replace(   string,   pattern,   replacement,   ...,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE )  str_replace_all(   string,   pattern,   replacement,   ...,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE )  str_remove(   string,   pattern,   ...,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE )  str_remove_all(   string,   pattern,   ...,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE )  str_pad(string, side = c(\"left\", \"right\", \"both\"), pad = \" \", use_width = TRUE)  str_numpad(x)  str_enum(x, side = c(\"right\", \"left\"), sep = \"\")  str_enum_left(x, sep = \"\")  str_enum_right(x, sep = \"\")  str_split(string, pattern, n = Inf, simplify = FALSE)  str_split_fixed(string, pattern, n = Inf)  str_split_1(string, pattern)"}]
